{"version":3,"sources":["Kupuj-towary/App.js","serviceWorker.js","index.js"],"names":["goodsArray","key","name","price","numberAvailable","numberArray","Array","length","fill","costArray","receiptArray","limitActualValue","Cashier","props","map","t","numberInCart","bill","sumTotal","onClick","handleBuy","className","undefined","Wallet","limit","Math","abs","limitActual","Order","number","cost","orderValue","Header","CartWidget","handleGood","Good","data","Main","order","App","state","mathMachine","x","y","operator","xBefore","floor","xAfter","toString","indexOf","substr","yBefore","yAfter","sumBefore","parseInt","makeNewLimit","setState","prevState","toFixed","reduce","total","num","makeReceipt","i","push","newLimit","Helmet","charset","content","http-equiv","property","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06009667.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport \"./App.css\";\n\nlet goodsArray = [\n  { key: 0, name: \"towar PIERWSZY\", price: 3.99, numberAvailable: 111 },\n  { key: 1, name: \"good SECOND\", price: 6.66, numberAvailable: 131 },\n  { key: 2, name: \"DRITTEN Ware\", price: 8.2, numberAvailable: 100 },\n  { key: 3, name: \"QUATRIÃˆME marchandise\", price: 9.99, numberAvailable: 9 }\n];\n\nlet numberArray = new Array(goodsArray.length).fill(0);\nlet costArray = new Array(goodsArray.length).fill(0);\nlet receiptArray = [];\nlet limitActualValue = 0;\n\nconst Cashier = props => {\n  return (\n    <>\n      <h3>Cashier</h3>\n      <ul>\n        {goodsArray.map(t =>\n          props.numberInCart[t.key] > 0 ? (\n            <li key={t.key}>\n              {t.name}: {props.numberInCart[t.key]} pcs, for {props.bill[t.key]}\n            </li>\n          ) : null\n        )}\n      </ul>\n      <p>Sum total: {props.sumTotal}</p>\n      <button\n        onClick={() => props.handleBuy()}\n        className={!props.sumTotal ? \"disabled\" : undefined}\n      >\n        Kupuj / Buy / Kaufen / Acheter\n      </button>\n    </>\n  );\n};\n\nconst Wallet = props => {\n  return (\n    <>\n      <h3>Wallet</h3>\n      <p>\n        {props.limit > 0\n          ? `Limit in wallet: ${props.limit}`\n          : `Limit already exceeded by: ${Math.abs(props.limit)}`}\n      </p>\n      <p>\n        {props.limitActual > 0\n          ? `Currently in the wallet: ${props.limitActual}`\n          : `Currently over budget: ${Math.abs(props.limitActual)}`}\n      </p>\n    </>\n  );\n};\n\nconst Order = props => {\n  return (\n    <>\n      <h3>Your order:</h3>\n      <ul>\n        {receiptArray.map(t => (\n          <li key={t.key}>\n            {t.name}; {t.number} pcs, for {t.cost}\n          </li>\n        ))}\n      </ul>\n      <p>Sum total: {props.orderValue}</p>\n      <strong>Thank you!</strong>\n    </>\n  );\n};\n\n// const Helmet = () => {\n//   return (\n//     <>\n//     </>\n//   );\n// };\n\nconst Header = () => {\n  return (\n    <header>\n      <h3>Black Friday application - what it does?</h3>\n      <ul>\n        <li>\n          Stimulate your happiness by simulacring ecstasy of getting new better\n          and best goods. Buying makes people happy.\n        </li>\n        <li>\n          One can add (and remove if wants) more new goods. Every good is good.\n        </li>\n        <li>\n          Stock info is updated immediately after purchase. Additionally\n          information about current capacity of purchase is provided\n        </li>\n        <li>\n          Budget limit is displayed, current and total. You can track overruns,\n          no warnings just info.\n        </li>\n        <li>\n          Prices, prices everywhere. Of a good, for one piece, all you are\n          buyimg, total sum of purchase, actual and the previous one.\n        </li>\n        <li>\n          Complete list of good: being purchased now, and in the previous\n          purchase.\n        </li>\n        <li>\n          Application is in progress, new functions, and features are on the way\n          - this is my very first React application, so it's gonna grow till be\n          useful in learning this framework.\n        </li>\n      </ul>\n      <h1>Kupuj towary! Waren kaufen! Buy Goods! Acheter des biens !</h1>\n    </header>\n  );\n};\n\nconst CartWidget = props => {\n  const { numberAvailable } = props.numberAvailable;\n  const key = props.props;\n  return (\n    <div className=\"cartwidget\">\n      <div>\n        <h4>Availability</h4>\n        <p>Yet to buy: {numberAvailable - props.numberInCart[key]} pcs</p>\n        <p>In stock: {numberAvailable} pcs</p>\n      </div>\n      <div>\n        <div>\n          <h4>Widget nr {key}</h4>\n          <p>\n            Pcs in the cart: {props.numberInCart[key]},\n            <br />\n            for total: {props.bill[key]}\n          </p>\n        </div>\n        <div>\n          <button\n            onClick={() => props.handleGood(key, \"minus\")}\n            className={props.numberInCart[key] === 0 ? \"disabled\" : undefined}\n          >\n            {\" \"}\n            -{\" \"}\n          </button>\n          <button\n            onClick={() => props.handleGood(key, \"plus\")}\n            className={\n              numberAvailable - props.numberInCart[key] === 0\n                ? \"disabled\"\n                : undefined\n            }\n          >\n            {\" \"}\n            +{\" \"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Good = props => {\n  const { key, name, price, numberAvailable } = props.data;\n  return (\n    <div className=\"good\">\n      <h3>{name}</h3>\n      <div className=\"price\">Price: {price}</div>\n      <CartWidget\n        props={key}\n        numberAvailable={{ numberAvailable }}\n        numberInCart={props.numberInCart}\n        bill={props.bill}\n        handleGood={props.handleGood}\n      />\n    </div>\n  );\n};\n\nconst Main = props => {\n  return (\n    <main>\n      <div className=\"list\">\n        {goodsArray.map(t => (\n          <Good\n            key={t.key}\n            data={t}\n            numberInCart={props.numberInCart}\n            bill={props.bill}\n            handleGood={props.handleGood}\n          />\n        ))}\n      </div>\n      <div className=\"cart\">\n        <div>\n          <Cashier\n            numberInCart={props.numberInCart}\n            bill={props.bill}\n            sumTotal={props.sumTotal}\n            handleBuy={props.handleBuy}\n          />\n        </div>{\" \"}\n        <hr />\n        <div>\n          <Wallet\n            limit={props.limit}\n            sumTotal={props.sumTotal}\n            limitActual={props.limitActual}\n          />\n        </div>\n        {props.order && (\n          <>\n            <hr />\n            <div>\n              <Order bill={props.bill} orderValue={props.orderValue} />\n            </div>\n          </>\n        )}\n      </div>\n    </main>\n  );\n};\n\nclass App extends Component {\n  state = {\n    limit: 100,\n    limitActual: limitActualValue,\n    numberInCart: numberArray,\n    bill: costArray,\n    sumTotal: 0,\n    order: false,\n    orderValue: 0\n  };\n\n  mathMachine = (x, y, operator) => {\n    let xBefore = Math.floor(x);\n    let xAfter =\n      x.toString().indexOf(\".\") > 0\n        ? x.toString().substr(x.toString().indexOf(\".\") + 1, 2)\n        : \"0\";\n    let yBefore = Math.floor(y);\n    let yAfter =\n      y.toString().indexOf(\".\") > 0\n        ? y.toString().substr(y.toString().indexOf(\".\") + 1, 2)\n        : \"0\";\n\n    if (operator === \"plus\") {\n      let sumBefore = xBefore + yBefore;\n      if (xAfter.length === 1) {\n        xAfter *= 10;\n      }\n      let sumAfter = (parseInt(xAfter) + parseInt(yAfter)) / 100;\n      let sumInArticle = sumBefore + sumAfter;\n      return sumInArticle;\n    }\n\n    if (operator === \"minus\") {\n      let sumBefore = xBefore - yBefore;\n      if (xAfter.length === 1) {\n        xAfter *= 10;\n      }\n      let sumAfter = (parseInt(xAfter) - parseInt(yAfter)) / 100;\n      let sumInArticle = sumBefore + sumAfter;\n      return sumInArticle;\n    }\n  };\n\n  makeNewLimit = () => {\n    this.setState(prevState => ({\n      limitActual: this.mathMachine(\n        prevState.limit,\n        prevState.sumTotal,\n        \"minus\"\n      ).toFixed(2)\n    }));\n  };\n\n  handleGood = (key, operator) => {\n    if (\n      operator === \"plus\" &&\n      this.state.numberInCart[key] < goodsArray[key].numberAvailable\n    ) {\n      this.state.numberInCart[key] += 1;\n    } else if (operator === \"minus\" && this.state.numberInCart[key] > 0) {\n      this.state.numberInCart[key] -= 1;\n    } else {\n      return;\n    }\n\n    costArray[key] = this.mathMachine(\n      costArray[key],\n      goodsArray[key].price,\n      operator\n    );\n\n    let sumTotal = this.state.bill.reduce((total, num) => {\n      return total + num;\n    });\n    sumTotal = sumTotal.toFixed(2);\n    if (sumTotal == 0.0) {\n      sumTotal = parseInt(0);\n    }\n    this.setState({\n      numberInCart: this.state.numberInCart,\n      bill: costArray,\n      sumTotal: sumTotal\n    });\n    this.makeNewLimit();\n  };\n\n  makeReceipt = () => {\n    receiptArray = [];\n    for (let i = 0; i < goodsArray.length; i++) {\n      if (this.state.numberInCart[i] > 0) {\n        receiptArray.push({\n          key: i,\n          name: goodsArray[i].name,\n          number: this.state.numberInCart[i],\n          cost: this.state.bill[i]\n        });\n      }\n      this.setState({\n        orderValue: this.state.sumTotal\n      });\n    }\n  };\n\n  handleBuy = () => {\n    if (this.state.sumTotal > 0) {\n      goodsArray.map(t => {\n        goodsArray[t.key].numberAvailable -= numberArray[t.key];\n      });\n      costArray = new Array(goodsArray.length).fill(0);\n      numberArray = new Array(goodsArray.length).fill(0);\n\n      let newLimit = this.mathMachine(\n        this.state.limit,\n        this.state.sumTotal,\n        \"minus\"\n      );\n\n      this.setState({\n        limit: newLimit,\n        newLimit: this.state.limit,\n        order: true,\n        numberInCart: numberArray,\n        bill: costArray,\n        sumTotal: 0\n      });\n      this.makeReceipt();\n    } else {\n      return;\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Helmet>\n          <meta charset=\"UTF-8\" />\n          <meta\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0\"\n          />\n          <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n          <meta\n            property=\"og:url\"\n            content=\"https://tdudkowski.github.io/Kupuj-towary/\"\n          />\n          <meta property=\"og:type\" content=\"application\" />\n          <meta\n            property=\"og:title\"\n            content=\"Kupuj towary try your Black Friday experience\"\n          />\n          <meta\n            property=\"og:description\"\n            content=\"my first React app - data flow and structuring components\"\n          />\n          <meta\n            property=\"og:image\"\n            content=\"https://tdudkowski.github.io/Kupuj-towary/kupujtowary.jpg\"\n          />\n\n          <meta name=\"twitter:card\" content=\"app\" />\n          <meta name=\"twitter:site\" content=\"@tdudkowski\" />\n          <meta name=\"twitter:creator\" content=\"@tdudkowski\" />\n          <meta\n            property=\"og:url\"\n            content=\"https://tdudkowski.github.io/Kupuj-towary/\"\n          />\n          <meta property=\"og:title\" content=\"Kupuj towary\" />\n          <meta\n            property=\"og:description\"\n            content=\"my first React app - data flow and structuring components\"\n          />\n          <meta\n            property=\"og:image\"\n            content=\"https://tdudkowski.github.io/Kupuj-towary/kupujtowary.jpg\"\n          />\n\n          <title>Kupuj towary try your Black Friday experience</title>\n        </Helmet>\n        <div className=\"container\">\n          <Header />\n          <Main\n            numberInCart={this.state.numberInCart}\n            bill={this.state.bill}\n            sumTotal={this.state.sumTotal}\n            limit={this.state.limit}\n            limitActual={this.state.limitActual}\n            order={this.state.order}\n            orderValue={this.state.orderValue}\n            handleGood={this.handleGood}\n            handleBuy={this.handleBuy}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport App from \"./Kupuj-towary/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}